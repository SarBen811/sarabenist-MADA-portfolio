{
  "hash": "e93c63855768f045533443d0f8a42b16",
  "result": {
    "markdown": "---\ntitle: \"Fitting\"\noutput: html_document\nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-depth: 2\n---\n\n\n***This exercise is the third in the flu analysis series. This page will use the flu analysis data to create and fit models for the two main outcomes (body temperature and nausea) against one predictor (runny nose) and a full model with all symptoms.***\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(performance)\nlibrary(here)\n```\n:::\n\n\n\n## Load data\n\nLoad the cleaned data from the `data` folder. Reassign as `flu`.\n\n::: {.cell}\n\n```{.r .cell-code}\n#load data\nfilelocation <- here(\"fluanalysis\", \"data\", \"cleandata.rds\")\nload(filelocation)\n#reassign as flu\nflu <- cleandata\n```\n:::\n\n\n## Fit linear model: RunnyNose\n\nFirst, we will create the univariate linear model of runny nose predicting body temperature\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_mod <- linear_reg() #set linear regression\n\nRNlm_fit <- lm_mod %>% \n  fit(BodyTemp ~ RunnyNose, data = flu) # create fitted linear model\n\ntidy(RNlm_fit) #produce summary of fitted model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term         estimate std.error statistic p.value\n  <chr>           <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    99.1      0.0819   1210.   0      \n2 RunnyNoseYes   -0.293    0.0971     -3.01 0.00268\n```\n:::\n:::\n\nThe fitted model has produced a linear equation of BodyTemp = -0.2926(RunnyNoseYes) + 99.14. This would indicate that having a runny nose actually predicts a lower body temperature. \n\n### Predicting from model\n\nNext, we can try predicting from the linear model. This code follows the \"Getting Started\" code from the `tidymodels` website. We will use median body temperature as our predicted outcome based on runny nose as the predictor.\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_points <- flu %>% \n  expand.grid(BodyTemp = 98.50, #median body temperature found during exploration portion\n              RunnyNose = c( \"Yes\", \"No\")) #create expanded dataframe\n\nmedian_predict <- predict(RNlm_fit, new_data = new_points) #predicts output values from the expanded dataframe\n\ntidy(median_predict) #summary table of prediction\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Data frame tidiers are deprecated and will be removed in an upcoming\nrelease of broom.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 13\n  column     n  mean    sd median trimmed   mad   min   max range      skew\n  <chr>  <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>     <dbl>\n1 .pred     56  99.0 0.148   99.0    99.0 0.146  98.9  99.1 0.293 -1.46e-13\n# … with 2 more variables: kurtosis <dbl>, se <dbl>\n```\n:::\n\n```{.r .cell-code}\nconf_int_pred <- predict(RNlm_fit,\n                         new_data = new_points,\n                         type = \"conf_int\") #confidence intervals for prediction\n\nplot_data <- new_points %>% \n  bind_cols(median_predict) %>% \n  bind_cols(conf_int_pred) # create new data set with prediction and confidence intervals\n```\n:::\n\nTo view the output easier, we will plot the predicted points using `ggplot`\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plot_data, aes(RunnyNose))+\n  geom_point(aes(y = .pred))+ #predictions on the y axis\n  geom_errorbar(aes(ymin = .pred_lower,\n                    ymax = .pred_upper), #produces error bars\n                width = 0.5) +\n  labs(y = \"Body Temperature\")\n```\n\n::: {.cell-output-display}\n![](fitting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nWe can see the predicted median body temperature based on having a runny nose is 98.85 degrees and 99.15 if you don't have a runny nose. Interesting!\n\n## Fit linear model: All symptoms\n\nNext, we will create a fitted linear model using all symptoms as predictors.\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_mod <- linear_reg()\n\nASlm_fit <- lm_mod %>% \n  fit(BodyTemp ~ ., data = flu) #use all symptoms (including nausea) as predictors\ntidy(ASlm_fit) #summary of fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 34 × 5\n   term                 estimate std.error statistic   p.value\n   <chr>                   <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)          97.9        0.304   323.     0        \n 2 SwollenLymphNodesYes -0.167      0.0920   -1.81   0.0703   \n 3 ChestCongestionYes    0.0993     0.0972    1.02   0.307    \n 4 ChillsSweatsYes       0.192      0.127     1.51   0.132    \n 5 NasalCongestionYes   -0.220      0.114    -1.94   0.0534   \n 6 SneezeYes            -0.366      0.0983   -3.72   0.000213 \n 7 FatigueYes            0.268      0.161     1.67   0.0959   \n 8 SubjectiveFeverYes    0.444      0.103     4.30   0.0000192\n 9 HeadacheYes           0.00654    0.125     0.0522 0.958    \n10 WeaknessMild          0.0110     0.189     0.0580 0.954    \n# … with 24 more rows\n```\n:::\n:::\n\nThe symptoms with positive estimates predict higher body temperature and the negative estimates predict lower body temperature. No one symptom appears to be a strong predictor, and the some variables produced an NA. \n\nAnother way to look at the model without making predictions is using the `glance` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nglance(ASlm_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1   0.127  0.0851  1.14    3.06 4.24e-8    33 -1117. 2304. 2464.    911.     696\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual\n```\n:::\n:::\n\nThe output shows various estimates of how well the model fits the data. \n\n## Compare linear models\n\nTo compare the models, we can use the `compare_performance()` function from the `performance` package.\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_performance(RNlm_fit,ASlm_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Comparison of Model Performance Indices\n\nName     | Model |  AIC (weights) | AICc (weights) |  BIC (weights) |    R2 | R2 (adj.) |  RMSE | Sigma\n-------------------------------------------------------------------------------------------------------\nRNlm_fit |   _lm | 2329.3 (<.001) | 2329.4 (<.001) | 2343.1 (>.999) | 0.012 |     0.011 | 1.188 | 1.190\nASlm_fit |   _lm | 2303.6 (>.999) | 2307.3 (>.999) | 2464.4 (<.001) | 0.127 |     0.085 | 1.117 | 1.144\n```\n:::\n:::\n\nThe AIC and R2 are both estimates of how well the models fit the data by determining how much variation in the data is explained by the model. Considering the R2, the all symptom model is a better fit than the runny nose model because the R2 is higher. In addition, a better fitted model will have a lower AIC, which also supports the all symptom model as a better fit. \n\n## Fit logistic model: RunnyNose\n\nNow we will consider nausea as our outcome of interest with runny nose as the predictor. \n\n::: {.cell}\n\n```{.r .cell-code}\nlog_mod <- logistic_reg() %>% set_engine(\"glm\") #sets logistic regression\n\nRNlog_fit <- log_mod %>% \n  fit(Nausea ~ RunnyNose,\n      data = flu)\n\ntidy(RNlog_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term         estimate std.error statistic    p.value\n  <chr>           <dbl>     <dbl>     <dbl>      <dbl>\n1 (Intercept)   -0.658      0.145    -4.53  0.00000589\n2 RunnyNoseYes   0.0502     0.172     0.292 0.770     \n```\n:::\n:::\n\nThe fitted model has produced a logistic equation of prob(Nausea) = 0.0502(RunnyNoseYes) -0.6578. This would indicate that having a runny nose increases the probability of having nausea. \n\n## Fit logistic model: All symptoms\n\nFitting the full model with all symptoms predicting nausea:\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_mod <- logistic_reg() %>% set_engine(\"glm\")\n\nASlog_fit <- log_mod %>% \n  fit(Nausea ~ .,\n      data = flu)\n\ntidy(ASlog_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 34 × 5\n   term                 estimate std.error statistic p.value\n   <chr>                   <dbl>     <dbl>     <dbl>   <dbl>\n 1 (Intercept)             0.355     7.81     0.0454  0.964 \n 2 SwollenLymphNodesYes   -0.249     0.196   -1.27    0.203 \n 3 ChestCongestionYes      0.268     0.211    1.27    0.203 \n 4 ChillsSweatsYes         0.279     0.287    0.970   0.332 \n 5 NasalCongestionYes      0.427     0.254    1.68    0.0931\n 6 SneezeYes               0.178     0.210    0.845   0.398 \n 7 FatigueYes              0.229     0.372    0.617   0.537 \n 8 SubjectiveFeverYes      0.273     0.225    1.22    0.224 \n 9 HeadacheYes             0.333     0.285    1.17    0.242 \n10 WeaknessMild           -0.118     0.447   -0.264   0.792 \n# … with 24 more rows\n```\n:::\n:::\n\nSimilar to the continuous outcome, the logistic regression estimates are positive if they increase the probability of having nausea and negative if they decrease the probability of having nausea.The same variables produced an NA in the model fitting.\n\n## Compare logistic models\n\nWe can once again compare the models using the `compare_performance` function. \n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_performance(RNlog_fit,ASlog_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Comparison of Model Performance Indices\n\nName      | Model | AIC (weights) | AICc (weights) | BIC (weights) | Tjur's R2 |  RMSE | Sigma | Log_loss | Score_log | Score_spherical |   PCP\n-----------------------------------------------------------------------------------------------------------------------------------------------\nRNlog_fit |  _glm | 948.6 (<.001) |  948.6 (<.001) | 957.8 (>.999) | 1.169e-04 | 0.477 | 1.139 |    0.647 |  -107.871 |           0.012 | 0.545\nASlog_fit |  _glm | 819.5 (>.999) |  823.0 (>.999) | 975.7 (<.001) |     0.247 | 0.414 | 1.039 |    0.515 |      -Inf |           0.002 | 0.658\n```\n:::\n:::\n\nFollowing the same reasoning with the R2 and AIC that we used with the linear models, the all symptom model is a better fit of the data and explains more of the variation than the univariate model alone. \n\n\n",
    "supporting": [
      "fitting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}