{
  "hash": "b6b7b3640acc1574ed83eb572adaaf6e",
  "result": {
    "markdown": "---\ntitle: \"Visualization Exercise\"\noutput:\n  html_document:\n    toc: FALSE\n---\n\n\n## Data source and description\n\nThe data I will use is from the FiveThirtyEight article [\"Some People Are Too Superstitious To Have A Baby On Friday The 13th\"](https://fivethirtyeight.com/features/some-people-are-too-superstitious-to-have-a-baby-on-friday-the-13th/) and the associated [GitHub repository](https://github.com/fivethirtyeight/data/tree/master/births). This article uses data from the National Center for Health Statistics (1994 - 2003) and the Social Security Administration (2000 - 2014). The two data files contain information on the year, month, date (as in number of the month), day of the week (1 represents Monday and 7 represents Sunday), and number of births for each date. For this exercise, I will be attempting to remake the first figure of the article shown below. ![](VEorignalgraph.webp){width=\"451\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(tidyverse)\n```\n:::\n\n\n## Data loading\n\nI downloaded the data files and placed them into the data folder as `births1` and `births2`. Using the `read_delim()` function, these data sets will be assigned as `data1` and `data2`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#summary of datasets\nsummary(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      year          month        date_of_month    day_of_week     births     \n Min.   :1994   Min.   : 1.000   Min.   : 1.00   Min.   :1    Min.   : 6443  \n 1st Qu.:1996   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.:2    1st Qu.: 8844  \n Median :1998   Median : 7.000   Median :16.00   Median :4    Median :11615  \n Mean   :1998   Mean   : 6.524   Mean   :15.73   Mean   :4    Mean   :10877  \n 3rd Qu.:2001   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:6    3rd Qu.:12274  \n Max.   :2003   Max.   :12.000   Max.   :31.00   Max.   :7    Max.   :14540  \n```\n:::\n\n```{.r .cell-code}\nsummary(data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      year          month        date_of_month    day_of_week     births     \n Min.   :2000   Min.   : 1.000   Min.   : 1.00   Min.   :1    Min.   : 5728  \n 1st Qu.:2003   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.:2    1st Qu.: 8740  \n Median :2007   Median : 7.000   Median :16.00   Median :4    Median :12343  \n Mean   :2007   Mean   : 6.523   Mean   :15.73   Mean   :4    Mean   :11350  \n 3rd Qu.:2011   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:6    3rd Qu.:13082  \n Max.   :2014   Max.   :12.000   Max.   :31.00   Max.   :7    Max.   :16081  \n```\n:::\n\n```{.r .cell-code}\n#check number of rows to identify potential issues when joining\nnrow(data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3652\n```\n:::\n\n```{.r .cell-code}\nnrow(data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5479\n```\n:::\n:::\n\n\nLooking at the summary of the datasets, `data1` contains information for years 1994-2003, and `data2` for years 2000-2014. The columns for month, date_of_month, and day_of_week match, and the second dataset has more observations compared to the first.\n\n## Join data sets from sources\n\nThe graph uses data from the years 1994-2014, so we need to join the datasets together to analyze. According to the footnote, the data of the overlapping years did not greatly differ. We can now join the two data sets with `full_join()`. We should use full join rather than other `_join()` options in order to preserve as much data as possible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#join both data sets and assign to fulldata\nfulldata <- full_join(data1, data2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = c(\"year\", \"month\", \"date_of_month\", \"day_of_week\", \"births\")\n```\n:::\n\n```{.r .cell-code}\n#summary of dataset and check for joining issues\nsummary(fulldata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      year          month        date_of_month    day_of_week     births     \n Min.   :1994   Min.   : 1.000   Min.   : 1.00   Min.   :1    Min.   : 5728  \n 1st Qu.:2000   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.:2    1st Qu.: 8787  \n Median :2003   Median : 7.000   Median :16.00   Median :4    Median :11998  \n Mean   :2004   Mean   : 6.523   Mean   :15.73   Mean   :4    Mean   :11161  \n 3rd Qu.:2008   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:6    3rd Qu.:12774  \n Max.   :2014   Max.   :12.000   Max.   :31.00   Max.   :7    Max.   :16081  \n```\n:::\n\n```{.r .cell-code}\nstr(fulldata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [9,131 Ã— 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year         : num [1:9131] 1994 1994 1994 1994 1994 ...\n $ month        : num [1:9131] 1 1 1 1 1 1 1 1 1 1 ...\n $ date_of_month: num [1:9131] 1 2 3 4 5 6 7 8 9 10 ...\n $ day_of_week  : num [1:9131] 6 7 1 2 3 4 5 6 7 1 ...\n $ births       : num [1:9131] 8096 7772 10142 11248 11053 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   year = col_double(),\n  ..   month = col_double(),\n  ..   date_of_month = col_double(),\n  ..   day_of_week = col_double(),\n  ..   births = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\nThe `fulldata` set now contains information for 1994-2014 with 9131 observations. The columns are the same as the original two datasets.\n\n## Manipulate data\n\nNow that we have the data for the full range of years, we need to manipulate the data to find the average number of births on the 6th or 20th of the month compared to the average number of of births on the 13th of the month. Since the graph is separated by weekday, we need to first group by weekday.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign to plot1data: find the average number of births on each weekday \n  #for the 6th or 20th of the month (new variable: avg620),\n#the average number of births on each weekday \n  #for the 13th of the month(new variable: avg13),\n#and the percent difference for each weekday(new variable: pctdiff)\nplot1data <- fulldata %>% group_by(day_of_week) %>% \n  summarise(avg620 = mean(births[date_of_month == 6 | date_of_month == 20]),\n            avg13 = mean(births[date_of_month == 13])) %>%\n  mutate(pctdiff = (avg13-avg620)/avg13 *100)\n\n#recode days of the week for plot labels, \n  #factor to keep days ordered for graph\nplot1data<- plot1data %>% \n  mutate(day_of_week = case_when(\n    day_of_week %in% 1 ~ \"MON\",\n    day_of_week %in% 2 ~ \"TUES\",\n    day_of_week %in% 3 ~ \"WED\",\n    day_of_week %in% 4 ~ \"THURS\",\n    day_of_week %in% 5 ~ \"FRI\",\n    day_of_week %in% 6 ~ \"SAT\",\n    day_of_week %in% 7 ~ \"SUN\")) %>% \n  mutate(day_of_week = factor(day_of_week,\n        levels = c(\"MON\", \"TUES\", \"WED\", \"THURS\", \"FRI\", \"SAT\", \"SUN\")))\n  \n\n#check new dataset\nsummary(plot1data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n day_of_week     avg620          avg13          pctdiff       \n MON  :1     Min.   : 7636   Min.   : 7560   Min.   :-7.0055  \n TUES :1     1st Qu.:10150   1st Qu.: 9997   1st Qu.:-3.2948  \n WED  :1     Median :12559   Median :11737   Median :-2.2064  \n THURS:1     Mean   :11265   Mean   :10938   Mean   :-2.7989  \n FRI  :1     3rd Qu.:12744   3rd Qu.:12337   3rd Qu.:-1.5748  \n SAT  :1     Max.   :12870   Max.   :12600   Max.   :-0.6414  \n SUN  :1                                                      \n```\n:::\n:::\n\n\nThe new dataframe `plot1data` has a summary of the average number of births on the 6th or 20th and the average number of births on the 13th as well as the percent difference for each weekday. Notice that we needed to use the `summarise()` rather than the `mutate()` function to create the new variables. The `summarise()` function returns one row for a group of observations after a `group_by()` statement while `mutate()` returns the same number of rows as the original dataset.\n\n## Plot graph\n\nUsing the `plot1data`, we can attempt to recreate the graph using the `ggplot()` and associated functions.\n\nNote: Because I did not remove data for the national holidays that fall on either the 6th or 20th between 1994 to 2014, my graph does not match the article's exactly, but the trends are still present.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot the data and adjust graph appearance to article\nggplot(plot1data)+\n  geom_col(aes(x = day_of_week, y = pctdiff, fill = day_of_week), width = 0.75)+\n  theme(panel.grid = element_line(colour = \"#E1E1E1\"),\n        plot.background = element_rect(fill = \"#F1F1F1\" ),\n        panel.background = element_rect(fill = \"#F1F1F1\"),\n        axis.line.x = element_line(color = \"black\"),\n        plot.title = element_text(face = \"bold\"),\n        plot.subtitle = element_text(size = 10),\n        legend.position = \"none\")+\n  labs(title = \"The Friday the 13th effect\",\n       subtitle = \"Difference in the share of U.S. births on the 13th of each month\\nfrom the average of births on the 6th and the 20th, 1994-2014\",\n       y = \"ppt\", x = NULL)+\n  scale_x_discrete(position = \"top\")+\n  scale_y_continuous(breaks = c(0,-1,-2,-3,-4,-5,-6))+\n  scale_fill_manual(values =\n        c(\"#EBB7EC\", \"#EBB7EC\", \"#EBB7EC\", \"#EBB7EC\",\n                   \"#E22EDD\", \"#EBB7EC\", \"#EBB7EC\"))\n```\n\n```{.r .cell-code}\nggsave(\"remadegraph.png\", width = 5, height= 5)\n```\n:::\n\n\n![](remadegraph.png)\n\nAfter adjusting the height and width of the final graph, the remade plot is pretty close to the original graph. The biggest differences that I could not code for is the font and removal of holidays. \n\n## Troubles/Issues \nWhen I was trying to recreate the graph, there was a lot of googling to figure out all the theme elements to adjust (particularly with [this website](https://ggplot2-book.org/polishing.html)), but my main issue was trying to get the correct data for percent change needed for the y axis. Google did not have that answer I was looking for since many of the solutions involved something along the line of y = (..count..)/sum(..count..) in ggplot. Eventually, I figured out how to manually code it correctly after determining exactly what was being compared on the graph.\n",
    "supporting": [
      "visualization_exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}